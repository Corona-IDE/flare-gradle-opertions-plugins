buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
            mavenCentral()
        }
    }
    dependencies {
        classpath group: 'com.netflix.nebula', name: 'nebula-dependency-recommender', version: '4.2.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-publishing-plugin', version: '4.2.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'nebula.dependency-recommender'
apply plugin: 'nebula.maven-resolved-dependencies'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-dependencies'

dependencyRecommendations {
    dependencyLock file: file("${rootDir}/dependencies.lock")
}

//Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
version = "${flareVersion}"
group = 'com.coronaide.flare'

sourceCompatibility = "${javaVersion}"

//Always download sources, to allow debugging, and use Eclipse containers for greater portability
eclipse {
    classpath {
        downloadSources=true
        containers = [ 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8' ]
    }
}

repositories {
    mavenCentral()
}

//Task which will show what the dependency set of the project is in a tree form
task dependencyReport(type: DependencyReportTask) {}

//Task which will show what is introducing a particular dependency
task dependencyInsightReport(type: DependencyInsightReportTask) {}

//Add LICENSE so it is included in all JARs, fulfilling the "distributions include license" requirement
jar{
    from("${rootDir}"){
        include 'LICENSE'
    }
}

//All projects should provide source code and javadoc, and upload these with any released artifacts
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource

    from("${rootDir}"){
        include 'LICENSE'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir

    from("${rootDir}"){
        include 'LICENSE'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//Setup default test behavior, including failure logging
test {
    testLogging {
        exceptionFormat 'full'

        quiet {
            events 'failed'
        }

        info {
            events 'skipped', 'failed', 'passed'
        }

        debug {
            events 'started', 'standard_out', 'standard_error', 'skipped', 'failed', 'passed'
        }
    }

    useTestNG() {
        useDefaultListeners = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}
