buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-dependency-recommender:4.2.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.starchartlabs.flare:flare-operations-plugins:1.1.0'
        classpath 'org.starchartlabs.flare:flare-publishing-plugins:0.3.0'
    }
}

apply plugin: 'eclipse'
apply plugin: 'java-gradle-plugin'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'nebula.dependency-recommender'
apply plugin: 'nebula.maven-resolved-dependencies'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-dependencies'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.starchartlabs.flare.increase-test-logging'
apply plugin: 'org.starchartlabs.flare.published-project'

// Putting this in gradle.properties breaks the build, because this uses it's own releases
group = 'org.starchartlabs.flare'

description = 'Gradle tasks and utilities for build and test operations'

dependencyRecommendations {
    propertiesFile file: file("${rootDir}/dependencies.properties")
}

//Always download sources, to allow debugging, and use Eclipse containers for greater portability
eclipse {
    classpath {
        downloadSources=true
    }
}

//JCenter is the Gradle plug-in standard
repositories {
    jcenter()
}

//Dependency versions managed in $rootDir/dependencies.lock
dependencies {
    compile gradleApi()
    
    testCompile gradleTestKit()
    
    testCompile 'org.testng:testng'
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [ 'checkstyle.config.dir' : rootProject.file('config/checkstyle') ]
    toolVersion = '8.18'
}
 
task checkstyleAll{}
 
tasks.withType(Checkstyle).all { checkstyleTask -> checkstyleAll.dependsOn checkstyleTask }
 
check.dependsOn checkstyleAll

//Add LICENSE so it is included in all JARs, fulfilling the "distributions include license" requirement
jar{
    from("${rootDir}"){
        include 'LICENSE'
    }
}

//All projects should provide source code and javadoc, and upload these with any released artifacts
sourcesJar{
    from("${rootDir}"){
        include 'LICENSE'
    }
}

javadocJar{
    from("${rootDir}"){
        include 'LICENSE'
    }
}

//Setup default test behavior, including failure logging
test {
    useTestNG() {
        useDefaultListeners = true
    }
}

jacocoTestReport {
    reports {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
        
        sourceSets project.sourceSets.main
        
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport

//If not a remote run, publish to local only
if(!project.hasProperty('remoteDeploy')){
    publishing {
        repositories {
            mavenLocal()
        }
    }
}

publishedInfo{
    url = 'https://github.com/StarChart-Labs/flare-operations-plugins'
  
    scm{
      github 'StarChart-Labs', 'flare-operations-plugins'
    }
  
    licenses{
      mit('repo')
    }
  
    developers{
      github 'romeara', 'Ryan OMeara'
    }
}

bintray {
    user = System.getProperty('bintray_user')
    key = System.getProperty('bintray_key')
    publications = [ 'nebula' ]

    if(!project.hasProperty('remoteDeploy')){
        dryRun = true
    }

    pkg {
        repo = 'flare'
        name = "${project.name}"
        userOrg = 'starchart-labs'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/StarChart-Labs/flare-operations-plugins.git'

        version {
            name = "${project.version}"
            desc = "${project.name} release ${project.version} final"
            released  = new Date()
            vcsTag = "v${project.version}"

            gpg {
                sign = true
            }
        }
    }
}
